No,Question,Option A,Option B,Option C,Option D,Option E,Correct Answer,Explanation,Competency
1,Which of the three pillars of observability is best suited for understanding the end-to-end journey of a request as it traverses multiple microservices?,Metrics,Logs,Traces (Distributed Tracing),Events,Alerts,C,"Distributed tracing captures the flow of a request across service boundaries, including timing information for each step. This allows developers to visualize the entire request path, identify bottlenecks, and understand service dependencies. Metrics aggregate data, logs provide discrete event info.",Telemetry & Observability
2,What is the primary mechanism by which Prometheus collects metrics data from target applications or services?,Targets push metrics to the Prometheus server via an agent.,Prometheus queries a central message bus where targets publish metrics.,Prometheus actively scrapes (pulls) metrics from HTTP endpoints exposed by the targets.,Targets write metrics directly to Prometheus's time-series database (TSDB).,Prometheus uses SNMP traps sent by the targets.,C,Prometheus operates on a pull model. It periodically sends HTTP requests to configured targets (or targets discovered via service discovery) on specific endpoints (usually /metrics) to retrieve their current metric values.,Prometheus
3,How can Kubernetes resource usage metrics (like CPU and memory consumption per Pod) directly inform cost management efforts?,By automatically adjusting application code to be more efficient.,By providing data to identify over-provisioned resources and potential waste.,By enforcing strict network policies to reduce data transfer costs.,By predicting future cloud provider price changes.,By increasing the number of replicas for cost distribution.,B,"Monitoring resource utilization allows teams to see if Pods consistently use less CPU/memory than requested/limited. This data highlights opportunities to right-size resource requests, reducing waste and potentially lowering costs by allowing more efficient packing of Pods onto nodes or using smaller nodes.",Cost Management
4,"What distinguishes ""observability"" from traditional ""monitoring""?",Monitoring uses dashboards; Observability uses only logs.,"Monitoring focuses on predefined metrics (""known unknowns""); Observability aims to infer system state from outputs (""unknown unknowns"").",Observability is only applicable to serverless architectures; Monitoring is for VMs.,Monitoring relies on pulling metrics; Observability relies on pushing logs.,Observability replaces the need for alerting systems.,B,"Traditional monitoring often tracks predefined key metrics against thresholds (did CPU usage cross 80%?). Observability is broader, focusing on equipping systems with telemetry (logs, metrics, traces) so engineers can ask arbitrary questions and understand novel or emergent system behaviors without pre-configuration.",Telemetry & Observability
5,"What is the role of an ""exporter"" in the Prometheus ecosystem?",To visualize Prometheus metrics in dashboards (like Grafana).,To push alerts from Prometheus to notification channels (like Slack).,To translate metrics from non-Prometheus native systems into the Prometheus format.,To store long-term Prometheus metrics data in remote storage.,To configure Prometheus scrape targets automatically.,C,"Many systems (e.g., databases, hardware, messaging queues) don't expose Prometheus metrics natively. Exporters are helper applications that query these systems for metrics, convert them into the Prometheus text exposition format, and expose them on an HTTP endpoint for Prometheus to scrape.",Prometheus
6,"Which Kubernetes feature helps prevent individual workloads or namespaces from consuming excessive cluster resources, thereby aiding cost control?",NetworkPolicy,ServiceAccount,ResourceQuota,Ingress,PodDisruptionBudget,C,"ResourceQuotas allow administrators to set constraints on the total amount of resources (CPU, memory, storage, object counts) that can be consumed within a specific namespace. This prevents resource hogging and helps manage costs associated with resource consumption.",Cost Management
7,What are the three main components (pillars) typically associated with observability in cloud-native systems?,"Performance, Scalability, Reliability","Logs, Metrics, Traces","Containers, Orchestration, Microservices","Authentication, Authorization, Auditing","CI/CD, GitOps, Infrastructure-as-Code",B,"Logs (discrete events), Metrics (numeric, aggregatable measurements over time), and Traces (request lifecycle across services) are widely considered the three foundational pillars providing visibility into system behavior.",Telemetry & Observability
8,"In PromQL (Prometheus Query Language), what is the primary purpose of ""labels""?",To define the alert conditions for firing rules.,To specify the time duration for a query range.,"To add dimensions (key-value pairs) to metrics for filtering, aggregation, and grouping.",To configure the scrape interval for specific targets.,To encrypt sensitive information within metric data.,C,"Labels are fundamental to Prometheus's data model. They allow metrics with the same name to be differentiated based on attributes like instance, job, service, environment, etc. PromQL uses these labels extensively for selecting and manipulating time series data.",Prometheus
9,Analyzing which type of observability data would be most effective in identifying inefficient database queries that contribute significantly to application latency and potentially cloud costs?,Infrastructure metrics (CPU/Memory usage of the database Pod).,Distributed traces showing long durations for database spans within application requests.,Kubernetes event logs for the database deployment.,Network flow logs between the application and the database.,Security audit logs from the database server.,B,"While infrastructure metrics might show high load, distributed traces pinpoint which specific database operations (represented as spans within a trace) are taking the longest time during user requests. This directly identifies inefficient queries impacting latency and potentially driving higher resource use (cost).",Cost Management
10,"What does ""instrumentation"" mean in the context of application observability?",Automatically installing monitoring agents on application hosts.,"Adding code to an application to generate and export telemetry data (logs, metrics, traces).",Configuring firewall rules to allow monitoring traffic.,Visualizing telemetry data in dashboards like Grafana.,Writing PromQL queries to analyze application performance.,B,"Instrumentation is the process of adding code (using libraries like OpenTelemetry SDKs or Prometheus client libraries) to an application so that it emits signals about its state and behavior â€“ creating log entries, incrementing metric counters, starting/ending trace spans.",Telemetry & Observability
11,What is the function of the Alertmanager component within the Prometheus monitoring stack?,To scrape metrics from target endpoints.,To store long-term metrics data.,"To handle alerts generated by Prometheus, including deduplication, grouping, and routing.",To visualize metrics data in graphical dashboards.,To perform automated remediation actions based on alerts.,C,"Prometheus server evaluates alerting rules based on PromQL expressions. When rules fire, Prometheus sends alerts to Alertmanager. Alertmanager then handles deduplicating, grouping related alerts, silencing, inhibition, and routing them to configured receivers (e.g., Slack, PagerDuty, email).",Prometheus
12,How can tracking resource requests vs. actual usage for Pods help optimize Kubernetes cluster costs?,"It allows increasing requests to guarantee performance, regardless of cost.","It helps identify ""stranded capacity"" where allocated resources (requests) are consistently higher than usage, indicating potential savings.",It determines the best CNI plugin to use for reducing network latency.,It automatically selects the cheapest cloud provider region for deployment.,It increases the number of nodes to improve availability.,B,"Resource requests guarantee capacity but also dictate scheduling and potentially cost (especially with Cluster Autoscaler). If actual usage is consistently far below requests, the allocated resources are wasted (""stranded capacity""). Right-sizing requests closer to usage allows better bin-packing and potential node reduction.",Cost Management
13,"Which observability pillar would be most useful for answering the question: ""What was the exact error message generated by service X at 3:15 PM yesterday?""",Metrics,Traces,Logs,Dashboards,Service Level Objectives (SLOs),C,"Logs record discrete, timestamped events, often including detailed contextual information like error messages, stack traces, and specific variable values at the time of the event. This makes them ideal for post-mortem debugging of specific incidents.",Telemetry & Observability
14,"Prometheus uses Service Discovery mechanisms (e.g., Kubernetes SD) primarily for what purpose?",To automatically discover TLS certificates for secure scraping.,To find and dynamically update the list of target endpoints it needs to scrape.,To discover available Grafana dashboards for visualization.,To determine which users are authorized to query metrics data.,To identify which version of Prometheus server is running.,B,"In dynamic environments like Kubernetes, Pod IPs change frequently. Service Discovery integrations allow Prometheus to automatically query the Kubernetes API (or other sources) to find the current set of targets (e.g., Pods matching specific labels) and their scrape endpoints, eliminating manual configuration.",Prometheus
15,"What is the concept of ""showback"" or ""chargeback"" in cloud cost management, often enabled by observability data?",Showing users the real-time stock price of the cloud provider.,Charging users based on the number of dashboards they create.,Allocating infrastructure costs back to the specific teams or applications that consumed the resources.,Showing developers feedback on their code quality based on metrics.,Charging a flat fee per namespace regardless of usage.,C,"Showback (reporting usage/cost) and Chargeback (actually billing internally) involve attributing shared infrastructure costs to the consuming business units, teams, or applications. This requires observability data (resource usage metrics, labels/tags) to correlate consumption with specific owners.",Cost Management
16,OpenTelemetry aims to standardize which parts of the observability pipeline?,Only the visualization layer (dashboards).,Only the long-term storage of metrics data.,"The generation, collection, and export of telemetry data (APIs, SDKs, protocols).",Only the alerting and notification mechanisms.,The configuration format for Prometheus scrape jobs.,C,"OpenTelemetry provides vendor-neutral APIs, SDKs for instrumenting code, a collector for processing/exporting data, and protocols (like OTLP) to standardize how telemetry data is produced and transmitted, aiming to avoid vendor lock-in at the instrumentation level.",Telemetry & Observability
17,"What type of Prometheus metric is most suitable for tracking a value that can arbitrarily increase or decrease, like the current number of active connections?",Counter,Gauge,Histogram,Summary,Info,B,"A Gauge represents a single numerical value that can go up or down. It's suitable for metrics like temperature, current memory usage, or the number of items in a queue. Counters only go up (or reset to zero). Histograms and Summaries track distributions.",Prometheus
18,"Why is tagging or labeling resources (e.g., Pods, Nodes, cloud resources) crucial for effective cost management in a shared cloud-native environment?",It improves the performance of the Kubernetes scheduler.,"It allows cost allocation and analysis based on specific teams, projects, or environments.",It automatically encrypts data associated with the tagged resources.,It enables the use of Vertical Pod Autoscaler (VPA).,It increases the fault tolerance of the control plane.,B,"In shared environments, costs are aggregated. Consistent tagging/labeling allows organizations to filter cost and usage data (often provided by cloud providers or third-party tools) to understand how much each project, team, environment, or application is contributing to the overall cloud spend.",Cost Management
19,Grafana is often used alongside Prometheus. What is Grafana's primary role in this context?,To store long-term metrics data collected by Prometheus.,To generate alerts based on Prometheus metrics.,To provide data visualization and dashboarding for Prometheus metrics (and other sources).,To replace the Prometheus server for scraping targets.,To manage Prometheus configuration files.,C,"Grafana is a popular open-source visualization platform. It excels at querying data sources like Prometheus and displaying the time-series data in flexible, interactive dashboards with various graph types, tables, and alerts (though Alertmanager is Prometheus's native alerter).",Telemetry & Observability
20,What does the rate() function in PromQL typically calculate?,The total count of a metric over a time range.,The average value of a gauge metric over a time range.,The per-second average rate of increase for a counter metric over a time range.,The 95th percentile value of a histogram metric.,The current value of a metric label.,C,"Counters continuously increase. rate() calculates how fast a counter is increasing per second, averaged over a specified time window. This is essential for understanding throughput or frequency of events (e.g., HTTP requests per second, errors per second).",Prometheus
21,Which strategy helps manage costs associated with persistent storage in Kubernetes?,Using only hostPath volumes for all stateful applications.,Regularly reviewing PersistentVolumeClaim (PVC) usage and cleaning up unused volumes.,Disabling the Container Storage Interface (CSI) plugin.,Storing all application data within container images.,Setting storageClassName to a non-existent class.,B,"Persistent storage often incurs costs. Orphaned PVCs (no longer used by any Pod) or PVCs attached to terminated resources can lead to unnecessary spending. Regularly auditing PVCs and deleting unused ones, potentially based on age or lack of mounting, is a key cost optimization practice.",Cost Management
22,"What is a ""Service Level Objective"" (SLO) in the context of observability and SRE?",A detailed log message indicating a service failure.,A contractual agreement with a cloud provider for uptime (SLA).,"A specific, measurable target for a service's reliability or performance (e.g., 99.9% availability).",A dashboard showing real-time resource utilization.,An alert configured in Alertmanager.,C,"An SLO is an internal target for service reliability, often based on user happiness metrics (e.g., availability, latency). Observability data (metrics, logs) is used to measure performance against SLOs. Service Level Indicators (SLIs) are the metrics used to measure SLO compliance. SLAs are external agreements.",Telemetry & Observability
23,What information does a Prometheus Histogram metric provide that a simple Gauge or Counter does not?,The exact time when the metric last changed value.,The total number of times an event has occurred.,The distribution of observed values across a set of configurable buckets.,The current status (up/down) of the monitored target.,The geographic location of the monitored instance.,C,"Histograms sample observations (e.g., request latencies) and count them in configurable buckets (e.g., <=100ms, <=200ms, <=500ms). They also provide the sum and count of observations. This allows calculating approximate quantiles (e.g., 95th percentile latency) using functions like histogram_quantile().",Prometheus
24,"How might analyzing network egress data, often available via cloud provider monitoring or specialized tools, help control costs?",By optimizing DNS resolution times within the cluster.,"By identifying unexpected or excessive data transfer out of the cluster/cloud, which often incurs costs.",By improving the efficiency of the CNI plugin's IP address allocation.,By reducing the number of LoadBalancer services used.,By increasing the MTU size for Pod network interfaces.,B,"Cloud providers typically charge for data transferred out to the internet or sometimes between regions/availability zones. Monitoring egress traffic helps identify applications sending large amounts of data unexpectedly, allowing investigation and potential optimization to reduce data transfer costs.",Cost Management
25,Jaeger and Zipkin are open-source tools commonly used in cloud-native environments. Which observability pillar are they primarily associated with?,Metrics aggregation and storage.,Log collection and analysis.,Distributed Tracing backend and visualization.,Alerting and notification routing.,Service discovery configuration management.,C,"Jaeger and Zipkin are popular open-source distributed tracing systems. They receive trace data (spans) generated by instrumented applications (often using OpenTelemetry or native libraries), store it, and provide UIs for visualizing request traces and analyzing service dependencies and latency.",Telemetry & Observability
26,What is the purpose of the job label automatically added by Prometheus during scraping?,To identify the specific metric name being scraped.,To indicate the IP address and port of the scraped target.,"To group targets belonging to the same scrape configuration (e.g., ""kubernetes-pods"").",To specify the data center location of the Prometheus server.,To store the timestamp of the last successful scrape.,C,"Prometheus configuration defines scrape jobs (e.g., a job to scrape all pods with label app=api). The job label is automatically attached to all metrics scraped from targets within that job definition, allowing easy filtering and aggregation for all instances of a particular service type.",Prometheus
27,"Which Kubernetes object can set default resource requests and limits for containers within a namespace if not specified in the Pod spec, indirectly aiding cost predictability?",ConfigMap,Secret,LimitRange,HorizontalPodAutoscaler,MutatingWebhookConfiguration,C,"A LimitRange can enforce minimum/maximum resource constraints and, crucially, apply default requests and limits to containers that don't explicitly define them. This ensures Pods have some resource boundaries set, preventing unbounded consumption and aiding resource allocation and cost estimation.",Cost Management
28,"What is meant by ""cardinality"" in the context of Prometheus metrics and labels?",The number of different metric names exposed by a target.,The total number of targets being scraped by Prometheus.,The number of unique time series generated by a metric name and its distinct label combinations.,The frequency at which Prometheus scrapes a specific target.,The storage duration configured for metrics data.,C,"High cardinality occurs when a metric has many unique combinations of label values (e.g., using user ID or request ID as a label). This creates many distinct time series, which can significantly increase resource consumption (memory, CPU, storage) on the Prometheus server. Managing cardinality is crucial.",Telemetry & Observability
29,What is the difference between the up metric automatically generated by Prometheus and application-specific health check metrics?,"up is a gauge, while health checks are counters.",up indicates scrape success; health checks indicate application functionality.,up is only generated for Kubernetes Pods; health checks are for external services.,up requires custom instrumentation; health checks are built-in.,up triggers Alertmanager directly; health checks require PromQL rules.,B,"Prometheus automatically generates an up{job=""..."", instance=""...""} metric for each target scrape (1 if successful, 0 if failed). This only tells if Prometheus could reach the /metrics endpoint. Application health checks (e.g., a /healthz endpoint) verify internal application logic or dependencies.",Prometheus
30,Tools like Kubecost or OpenCost integrate with Kubernetes and cloud providers primarily to achieve what?,To automatically optimize application code for better performance.,"To provide detailed cost allocation, monitoring, and optimization insights specific to Kubernetes workloads.",To replace the need for Prometheus and Grafana entirely.,To manage user authentication and RBAC policies within the cluster.,To deploy and manage CNI network plugins.,B,"These tools specialize in Kubernetes cost management. They correlate resource usage data (from metrics) with cloud billing data and Kubernetes object metadata (labels, namespaces) to provide granular insights into how much specific deployments, teams, or namespaces are costing and where optimizations are possible.",Cost Management
31,What is a potential downside of relying only on logs for observability?,Logs cannot capture detailed error messages.,Logs are difficult to aggregate and query for trends or patterns across many instances.,Logs do not provide timestamps for events.,Logs cannot be generated by most modern applications.,Logs cannot be stored centrally.,B,"While detailed, querying massive volumes of logs from distributed systems to understand overall trends (e.g., average latency, error rate) or relationships between events across services can be slow, expensive, and complex compared to querying pre-aggregated metrics or structured traces.",Telemetry & Observability
32,How does Prometheus's remote_write feature contribute to observability?,It allows Prometheus to scrape targets located in remote data centers.,It enables Prometheus to send alerts directly to remote notification systems.,It allows Prometheus to forward ingested metrics to long-term storage or other analysis systems.,It lets users remotely query Prometheus metrics via an API.,It configures remote Grafana instances automatically.,C,"remote_write allows Prometheus to stream its collected metrics data in near real-time to compatible remote endpoints. This is commonly used for long-term storage solutions (e.g., Thanos, Cortex, VictoriaMetrics, cloud vendor TSDBs) that can handle larger data volumes and longer retention periods.",Prometheus
33,Allocating costs based on Namespace in Kubernetes is a common strategy. What is a prerequisite for this approach to be effective?,All Pods must run with hostNetwork: true.,"Resources (Pods, PVCs, Services) must be consistently deployed into appropriate team/application-specific Namespaces.",The cluster must use the Cluster Autoscaler.,All applications must be instrumented with OpenTelemetry.,Only LoadBalancer services should be used for external access.,B,"If resources belonging to different teams or applications are mixed within the same Namespace, attributing costs accurately becomes difficult. A disciplined approach where each team or application has its own Namespace(s) allows usage and costs to be aggregated at the Namespace level.",Cost Management
34,"What is the primary goal of correlating different observability signals (e.g., linking a trace ID in logs to a specific distributed trace)?",To reduce the storage cost of telemetry data.,To allow visualization of metrics in Grafana.,To provide a more complete context for troubleshooting by connecting related events across signals.,To replace the need for manual code instrumentation.,To standardize the format of log messages.,C,"Finding a specific trace ID in application logs allows you to quickly jump to the corresponding distributed trace in Jaeger/Zipkin, showing the entire request flow. Linking metrics spikes to specific error logs provides context. Correlation ties the pillars together for faster, more effective debugging.",Telemetry & Observability
35,What does the Prometheus Query Language (PromQL) primarily operate on?,Raw log files stored on disk.,Relational database tables containing event data.,Time series data identified by metric names and key-value labels.,Distributed trace spans stored in Jaeger or Zipkin.,Kubernetes API object definitions (YAML).,C,PromQL is specifically designed to query and manipulate the time series data stored in Prometheus's TSDB. Its functions and operators work on vectors (sets) of time series selected using metric names and label matchers.,Prometheus
36,"When evaluating cloud costs, what is a key difference between ""reserved instances"" (RIs) or ""savings plans"" and ""on-demand"" pricing?",On-demand instances offer better performance than RIs.,"RIs provide significant discounts in exchange for a commitment to usage (e.g., 1 or 3 years).",On-demand pricing is only available for serverless functions.,RIs can only be used for Kubernetes control plane nodes.,On-demand instances have guaranteed availability; RIs do not.,B,Cloud providers offer lower hourly rates for compute resources via RIs or Savings Plans if customers commit to a certain level of usage for a defined term. On-demand pricing offers flexibility but at a higher hourly cost. Usage data from observability helps determine appropriate RI/SP commitments.,Cost Management
37,Which statement accurately describes structured logging?,Writing logs only in binary format for performance.,Writing log entries as plain text strings with embedded timestamps.,"Writing logs in a consistent, machine-readable format (e.g., JSON) with key-value pairs.",Only logging metrics data instead of event descriptions.,Encrypting all log messages before writing them to disk.,C,"Structured logging involves formatting log output as data structures (like JSON) rather than free-form text. This makes logs much easier to parse, filter, and analyze programmatically by log aggregation tools (like Elasticsearch, Loki), improving querying capabilities.",Telemetry & Observability
38,What problem does the Prometheus scrape_timeout configuration setting address?,It limits how long Prometheus waits for Alertmanager to respond.,It defines the maximum duration Prometheus will wait for a target to respond during a scrape.,It sets the retention period for metrics data in the TSDB.,It controls how often Prometheus reloads its configuration file.,It limits the number of concurrent scrapes Prometheus can perform.,B,"If a target is slow to respond or hangs, Prometheus needs a timeout to avoid waiting indefinitely and blocking other scrapes. scrape_timeout defines this limit; if the target doesn't respond within this duration, the scrape fails, and the up metric becomes 0.",Prometheus
39,"How can FinOps principles, which emphasize cloud financial accountability, be applied within a Kubernetes environment?",By giving developers unrestricted access to create cloud resources.,By focusing solely on reducing performance to minimize costs.,By integrating cost visibility (via observability) into engineering workflows and decision-making.,By manually approving every deployment to the cluster.,By using only open source software to avoid licensing fees.,C,"FinOps brings financial accountability to the cloud. In Kubernetes, this means using observability tools (metrics, tags) and cost monitoring platforms to make costs visible to engineers, enabling them to understand the cost implications of their architectural choices and resource requests, fostering optimization.",Cost Management
40,What is a key challenge when collecting traces in high-throughput systems?,Traces do not support capturing latency information.,Generating and storing trace data for every request can be resource-intensive and costly.,Traces cannot be correlated with logs or metrics.,Trace data cannot be visualized effectively.,Only specific programming languages support trace instrumentation.,B,Capturing detailed trace data for every single request in a high-volume system can generate massive amounts of data and add performance overhead. Sampling (collecting traces for a subset of requests) is often employed to manage this overhead while still providing representative insights.,Telemetry & Observability
41,"If you see rapidly increasing cardinality for a specific Prometheus metric, what is a likely cause related to labels?",The scrape interval for the metric's job is too short.,The metric name itself is changing frequently.,"A label value associated with the metric is highly dynamic and unique per instance/request (e.g., user ID, Pod ID, timestamp).",The Alertmanager configuration is incorrect.,The remote_write endpoint is unavailable.,C,"High cardinality is almost always caused by labels having too many unique values. Using identifiers like user IDs, session IDs, request IDs, or exact timestamps as label values creates a new time series for each unique value, leading to cardinality explosion.",Prometheus
42,Why is monitoring resource limits alongside usage and requests important for cost and stability?,Limits directly determine the cost charged by the cloud provider.,High limit values guarantee better application performance.,"Frequent throttling due to hitting CPU limits, or OOMKills due to hitting memory limits, indicate potential misconfiguration affecting stability and performance.",Limits prevent the Cluster Autoscaler from adding new nodes.,Limits are only relevant for stateful applications.,C,"Limits enforce resource caps. If a Pod frequently hits its memory limit, it gets OOMKilled (unstable). If it frequently hits its CPU limit, it gets throttled (poor performance). Monitoring these events indicates that limits might be too low, or the application needs optimization, impacting both stability and user experience.",Cost Management
43,What is the role of time-series data (metrics) in proactive observability?,Primarily useful only for debugging specific past incidents.,"Used to establish baselines, detect anomalies, and predict future trends or potential issues.",Only valuable when combined with distributed tracing data.,Cannot be used effectively for real-time alerting.,Replaced entirely by structured logging in modern systems.,B,"Analyzing trends, seasonality, and deviations from normal patterns in metrics data allows teams to detect potential problems (e.g., resource exhaustion, performance degradation) before they cause significant user impact. This enables proactive alerting and capacity planning.",Telemetry & Observability
44,"When configuring Prometheus alerting rules, what is the purpose of the for clause?","To specify the receiver for the alert (e.g., Slack channel).",To define the duration an alert condition must be true before the alert becomes firing.,"To set the severity label for the alert (e.g., critical, warning).",To group multiple related alert conditions into a single rule.,To add annotations with contextual information to the alert.,B,"Network glitches or brief spikes can cause alert conditions to flap. The for clause requires a condition to be continuously true for a specified duration (e.g., 5 minutes) before the alert transitions from pending to firing state and gets sent to Alertmanager, reducing noise from transient issues.",Prometheus
45,"What does ""right-sizing"" mean in the context of Kubernetes resource requests/limits and cost management?",Always setting requests and limits to the maximum allowed values.,Setting requests and limits based on observed application usage patterns to avoid waste.,Using only the largest available node types in the cluster.,Disabling resource limits entirely for better performance.,Matching resource requests exactly to the node's capacity.,B,"Right-sizing involves analyzing actual resource consumption (using metrics from observability tools) and adjusting the resources.requests and resources.limits in Pod specs to align closely with actual needs, minimizing over-provisioning (waste) while ensuring sufficient resources for performance.",Cost Management
46,Which observability pillar is typically the most voluminous and potentially most expensive to store and process?,Metrics,Traces,Logs,Events,SLOs,C,"Applications often generate vast amounts of log data, especially at debug levels or in verbose systems. While metrics and traces can also be large, raw log volumes frequently surpass them, leading to significant storage and processing costs in centralized logging systems.",Telemetry & Observability
47,"Besides the basic up metric, what is another common metric exposed by Prometheus exporters to indicate their own health or ability to collect data?",exporter_scrape_duration_seconds or similar metrics about the scrape itself.,node_cpu_seconds_total exposed by node_exporter.,kube_pod_info exposed by kube-state-metrics.,http_requests_total from an application.,etcd_server_has_leader from etcd.,A,"Many exporters expose metrics about their own operation, such as how long it took them to collect data from the target system (...scrape_duration_seconds) or the number of errors encountered (...scrape_errors_total). Monitoring these helps diagnose issues with the exporter itself.",Prometheus
48,How can cloud provider cost explorers or billing dashboards be used in conjunction with Kubernetes observability tools?,To replace the need for Prometheus monitoring within the cluster.,"To get a high-level view of overall spend, which can then be correlated with granular usage data from Kubernetes tools.",To configure Kubernetes NetworkPolicies automatically based on cost.,To directly adjust Pod resource requests based on billing alerts.,To provide distributed tracing across cloud services.,B,"Cloud billing dashboards show the total cost breakdown by service, region, tags etc. Kubernetes-specific tools (like Kubecost or Prometheus+Grafana) show detailed in-cluster resource consumption. Using both provides end-to-end visibility: overall cost trends from the provider, detailed workload attribution from K8s tools.",Cost Management
49,What is a primary benefit of adopting standardized telemetry collection like OpenTelemetry?,It guarantees that applications will have zero performance overhead from instrumentation.,"It allows organizations to switch observability backends (e.g., Jaeger to Datadog) without re-instrumenting application code.",It automatically writes optimal PromQL queries for dashboards.,It eliminates the need for log rotation and retention policies.,"It provides a single dashboard for all logs, metrics, and traces.",B,"By instrumenting code using the vendor-neutral OpenTelemetry APIs/SDKs, applications can export data in a standard format (OTLP). This data can then be sent to various compatible backends. If the organization decides to change backends, only the export configuration needs updating, not the application code.",Telemetry & Observability
50,"When Prometheus fails to scrape a target (e.g., due to network issues or the target being down), what value will the up metric for that target typically have?",1,-1,0,NaN (Not a Number),The metric will be absent (no data point recorded).,C,"The up metric explicitly indicates scrape success or failure. A value of 1 means the scrape succeeded, while 0 means it failed for any reason (timeout, connection refused, non-200 HTTP response, etc.).",Prometheus