No,Question,Option A,Option B,Option C,Option D,Option E,Correct Answer,Explanation,Competency
1,What is a primary motivation for adopting container orchestration beyond simply running containers with a runtime like containerd?,To achieve higher density of containers on a single host.,"To automate deployment, scaling, healing, and networking of distributed applications.",To simplify the process of building container images from source code.,To provide a standardized container image format for portability.,To enforce strict kernel isolation between containers.,B,"While runtimes manage container lifecycle on a single host, orchestration automates complex tasks across a cluster of hosts, such as declarative deployments, auto-scaling based on load, self-healing of failed instances, service discovery, and load balancing.",Container Orchestration Fundamentals
2,The Container Runtime Interface (CRI) in Kubernetes serves what key purpose?,To define the standard for container image formats.,To provide an API for kubelet to interact with different container runtimes.,To manage network plugin configurations (CNI).,To enforce security policies for container execution.,To schedule containers onto nodes.,B,"CRI is a plugin interface enabling kubelet to use various container runtimes (like containerd, CRI-O) without recompiling Kubernetes. It standardizes communication for operations like starting/stopping Pods and containers.",Runtime
3,"In Kubernetes RBAC, what is the difference between a Role and a ClusterRole?","Role grants permissions to users, ClusterRole to ServiceAccounts.","Role is for read-only access, ClusterRole for write access.","Role is namespaced, ClusterRole is cluster-wide.","Role defines permissions, ClusterRole binds permissions to subjects.","Role is for built-in components, ClusterRole for custom resources.",C,"Role objects define permissions within a specific namespace, while ClusterRole objects define permissions that apply cluster-wide (e.g., to access nodes, persistent volumes, or resources across all namespaces).",Security
4,Which Kubernetes networking component is responsible for ensuring that traffic sent to a Service's IP address is correctly routed to one of its backing Pods?,CNI plugin,kube-dns / CoreDNS,kube-proxy,Ingress controller,The API server's endpoint controller.,C,"kube-proxy runs on each node and maintains network rules (e.g., using iptables, IPVS) that implement Kubernetes Services. It watches the API server for Service and EndpointSlice changes and updates these rules accordingly.",Networking
5,What fundamental problem does a Service Mesh aim to solve for microservices that is not inherently addressed by basic Kubernetes Services?,Providing stable IP addresses for Pods.,Exposing services to external traffic via HTTP/S routing.,"Adding advanced observability, security (mTLS), and traffic control between services.",Managing persistent storage for stateful applications.,Automating the build and deployment of container images.,C,"While Kubernetes Services provide basic L4 load balancing and service discovery, a Service Mesh (like Istio, Linkerd) adds a dedicated infrastructure layer for L7 concerns like fine-grained traffic management (canary, retries), mutual TLS (mTLS) between services, and detailed telemetry (metrics, traces).",Service Mesh
6,What is the role of a PersistentVolumeClaim (PVC) in Kubernetes storage?,"It defines a specific type of storage backend (e.g., SSD, HDD).",It represents a piece of provisioned storage available in the cluster.,"It is a request for storage by a user/Pod, consuming a PersistentVolume.",It directly attaches a node's local disk to a Pod.,It manages the lifecycle of storage snapshots.,C,A PVC is a request for storage by a user. It consumes an existing PersistentVolume (PV) or can dynamically provision one if a StorageClass is configured. Pods then mount the PVC as a volume.,Storage
7,"How does container orchestration typically facilitate ""self-healing"" for applications?",By automatically applying security patches to container images.,By using AI to predict and prevent application failures.,By monitoring application health and automatically restarting or replacing failed instances.,By providing detailed debugging tools for developers to fix application bugs faster.,By load balancing traffic away from nodes with high CPU usage.,C,"Orchestrators monitor the health of application instances (e.g., Pods). If an instance fails a health check or crashes, the orchestrator can automatically restart it or replace it with a new instance to maintain the desired state and availability.",Container Orchestration Fundamentals
8,Which of these is a direct responsibility of an OCI-compliant container runtime like containerd?,Scheduling containers across a cluster of machines.,"Managing the lifecycle of containers on a single host (create, start, stop, delete).",Defining the desired state of application deployments.,Providing inter-service authentication using mTLS.,Allocating persistent storage volumes from cloud providers.,B,"Container runtimes like containerd are responsible for managing the complete container lifecycle on a single node, including pulling images, creating, starting, stopping, and deleting containers as instructed by a higher-level component like the kubelet.",Runtime
9,What is the primary purpose of a ServiceAccount in Kubernetes security?,To provide an identity for human users to log into the cluster.,To define permissions for accessing Kubernetes API resources.,To provide a distinct identity for processes running inside Pods to interact with the API.,To securely store API tokens and certificates for external services.,To encrypt network traffic between Pods.,C,"ServiceAccounts are meant for processes within Pods, giving them an identity that can be authenticated by the API server and authorized via RBAC to perform specific actions. Human users typically use regular user accounts or external identity providers.",Security
10,What role does the Container Network Interface (CNI) play in Kubernetes networking?,It defines the API for how kube-proxy implements Services.,It provides a specification for writing plugins to configure network interfaces for Pods.,It manages DNS resolution for Services and Pods within the cluster.,It enforces network policies to restrict traffic flow between Pods.,It provides a secure tunnel for control plane communication.,B,"CNI is a specification and a set of libraries for writing plugins to configure network interfaces in Linux containers. In Kubernetes, CNI plugins are responsible for connecting Pods to the cluster network and assigning IP addresses.",Networking
11,Which feature is typically NOT offered as a core capability by a Service Mesh?,Automatic mTLS encryption between services.,"Fine-grained traffic routing (e.g., canary deployments, A/B testing).",Distributed tracing and observability metrics for inter-service communication.,Container image vulnerability scanning.,Resiliency features like retries and timeouts.,D,"Service Meshes focus on managing and securing inter-service communication (runtime concerns). Image vulnerability scanning is typically part of the CI/CD pipeline or a separate security tool, addressing build-time or registry concerns.",Service Mesh
12,What is the primary function of a StorageClass in Kubernetes?,To directly provide storage to a Pod.,"To define different ""classes"" or types of storage for dynamic provisioning.",To claim a specific PersistentVolume for use.,To backup and restore data from PersistentVolumes.,To limit the amount of storage a namespace can consume.,B,"StorageClasses allow administrators to define different types of storage (e.g., ""fast-ssd"", ""cheap-hdd"", ""backup-storage"") with specific provisioners and parameters. This enables dynamic provisioning of PersistentVolumes when a PersistentVolumeClaim requests a certain class.",Storage
13,"How does declarative configuration, a common feature in container orchestration, improve system reliability compared to imperative commands?",It executes commands faster.,It allows users to specify the exact sequence of operations for desired outcomes.,"It describes the desired state, allowing the orchestrator to continuously reconcile.",It requires less YAML or JSON to define resources.,It automatically selects the most performant hardware.,C,"With declarative configuration, users define the desired end state. The orchestrator then works to achieve and maintain this state, automatically correcting drift. This is more robust than imperative commands which specify how to do something and don't inherently handle drift.",Container Orchestration Fundamentals
14,What is the significance of the dockershim component being removed from Kubernetes starting from v1.24?,Kubernetes no longer supports Docker-formatted container images.,Developers must use a different command-line tool instead of docker build.,"Kubernetes now directly uses container runtimes that implement CRI, like containerd.",All existing Docker containers must be rebuilt using a new OCI tool.,Pods can no longer run multiple containers.,C,"The removal of dockershim means Kubernetes no longer has built-in direct support for the Docker Engine as a runtime. Instead, it relies on runtimes that implement the Container Runtime Interface (CRI), such as containerd (which Docker itself uses) or CRI-O. Docker images still work.",Runtime
15,"When a NetworkPolicy in Kubernetes selects a Pod, what does it primarily control?",The Pod's ability to access external services outside the cluster.,The amount of network bandwidth the Pod can consume.,The ingress and egress network traffic for that Pod at L3/L4.,The DNS resolution behavior for the Pod.,The encryption of data in transit for the Pod.,C,"NetworkPolicies act like firewalls for Pods. They specify which Pods (or other network endpoints) are allowed to communicate with the selected Pods (ingress) and which destinations the selected Pods are allowed to communicate with (egress) based on IP addresses, ports, and labels.",Security
16,What is the primary mechanism for service discovery within a Kubernetes cluster for applications running in Pods?,Manually configuring IP addresses in application code.,Using NodePort services and node IPs.,"Kubernetes DNS (e.g., CoreDNS) resolving Service names to ClusterIPs.",Broadcasting service availability via UDP multicast.,Relying on a Service Mesh sidecar proxy.,C,"Kubernetes provides an internal DNS service (typically CoreDNS) that automatically creates DNS records for Services. Applications can discover other services by looking up their DNS names (e.g., my-service.my-namespace.svc.cluster.local), which resolve to the Service's ClusterIP.",Networking
17,"If a company wants to implement zero-trust security for inter-service communication within their Kubernetes cluster, what would a Service Mesh primarily contribute?",Encrypting persistent data at rest.,Enforcing strong authentication and authorization for kubectl users.,Providing automatic mutual TLS (mTLS) between all services in the mesh.,Scanning Pods for known vulnerabilities.,Managing firewall rules at the cluster's edge.,C,"A key feature of many Service Meshes is the ability to automatically establish and enforce mTLS for all traffic between services in the mesh. This encrypts traffic and ensures that services mutually authenticate each other, a core tenet of zero-trust networking.",Service Mesh
18,The Container Storage Interface (CSI) was developed to address what challenge in Kubernetes storage?,To provide a standard for defining StorageClass parameters.,To enable third-party storage vendors to develop plugins without modifying core Kubernetes code.,To improve the performance of hostPath volumes.,To automate the backup and restore of PersistentVolumes.,To define how containers should access configuration data.,B,"CSI is a standard for exposing block and file storage systems to containerized workloads. It allows storage vendors to create plugins that integrate with Kubernetes (and other orchestrators) to manage storage lifecycles, without needing their code to be part of the Kubernetes core.",Storage
19,Which of these is NOT a typical benefit of using a container orchestrator for managing applications?,Improved resource utilization through bin packing.,Simplified application code logic for handling infrastructure failures.,Abstracted underlying infrastructure differences.,Automatic conversion of monolithic applications to microservices.,Enhanced scalability and availability of applications.,D,"Orchestrators help deploy and manage microservices (and even well-architected monoliths), but they do not automatically refactor or convert application code from a monolithic architecture to a microservices architecture. That's a software design and development effort.",Container Orchestration Fundamentals
20,"What is a key characteristic of runc, often used by higher-level runtimes like containerd?",It's a full-fledged container orchestrator.,It provides a command-line tool for building OCI-compliant images.,It's a low-level OCI runtime responsible for spawning and running containers.,It's a CNI plugin for configuring Pod networking.,It's a distributed key-value store for container metadata.,C,runc is a CLI tool for spawning and running containers according to the OCI specification. Higher-level runtimes like containerd use runc (or similar OCI runtimes) under the hood to actually execute the containers.,Runtime
21,"What is the primary purpose of Secrets in Kubernetes, and how are they typically made available to Pods?",To store arbitrary non-sensitive configuration; as environment variables or files.,"To store sensitive data (e.g., passwords, tokens); as environment variables or volume mounts.",To define network policies; applied directly by kubelet.,To store TLS certificates for Ingress; only used by Ingress controllers.,To store container image pull credentials; only used by kubelet.,B,"Secrets are designed for sensitive information. While they can be used for image pull credentials, their broader use is for application secrets. They are base64 encoded (not encrypted by default in etcd) and can be mounted as files into Pods or exposed as environment variables.",Security
22,An Ingress resource in Kubernetes provides what type of functionality?,L4 TCP/UDP load balancing for internal services.,"Management of external HTTP/S access to services, with host/path based routing.",Network isolation between Pods within the same namespace.,Dynamic provisioning of persistent storage for web servers.,A CNI plugin implementation for advanced networking features.,B,"Ingress objects manage external access to services in a cluster, typically HTTP/S. They provide L7 features like host-based routing (e.g., foo.example.com) and path-based routing (e.g., example.com/bar), acting as a reverse proxy. An Ingress controller implements these rules.",Networking
23,"In the context of a Service Mesh, what does ""traffic splitting"" commonly refer to?",Dividing network bandwidth equally among all services.,"Routing a percentage of traffic to different versions of a service (e.g., for canary).",Encrypting only a portion of the traffic between services.,Splitting large data packets into smaller frames for transmission.,Blocking traffic from specific IP address ranges.,B,"Traffic splitting is a Service Mesh capability that allows routing specific percentages of incoming requests to different versions of a service. This is crucial for deployment strategies like canary releases or A/B testing, allowing gradual rollouts and risk mitigation.",Service Mesh
24,"If a Pod needs temporary scratch space that is empty upon creation and deleted when the Pod terminates, which volume type is most appropriate?",hostPath,persistentVolumeClaim,emptyDir,configMap,nfs,C,"An emptyDir volume is created when a Pod is assigned to a node. It is initially empty, and its contents are deleted when the Pod is removed from the node. It's useful for scratch space or sharing files between containers in the same Pod.",Storage
25,What is a key security implication of running containers as a non-root user?,It prevents containers from accessing network resources.,It reduces the potential impact if the container process is compromised.,It allows containers to bypass RBAC checks for API access.,It disables the container runtime's ability to pull images from private registries.,It encrypts all data written by the container to its filesystem.,B,"Running container processes as a non-root user is a security best practice. If an attacker compromises the process, they gain the privileges of that non-root user, which are significantly less than root, limiting their ability to harm the host system or other containers.",Security
26,What is the typical interaction flow when kubelet needs to start a Pod using a CRI-compliant runtime?,kubelet directly calls runc to create the container.,kubelet sends a request to the CRI gRPC server implemented by the runtime.,"kubelet updates etcd, and the runtime reads the changes.",kubelet instructs kube-proxy to prepare the network for the runtime.,kubelet uses kubectl commands to tell the runtime what to do.,B,"kubelet acts as a client to the CRI gRPC server implemented by the container runtime (e.g., containerd). It sends requests like RunPodSandbox (to create the Pod's environment) and CreateContainer/StartContainer for each container in the Pod.",Runtime
27,"In Kubernetes, what is the purpose of an EndpointSlice object in relation to a Service?",To define the external IP address for a LoadBalancer Service.,To store the DNS configuration for a Service.,To efficiently track and provide the IP addresses and ports of Pods backing a Service.,To enforce network policies for traffic destined to a Service.,To manage TLS termination for a Service.,C,"EndpointSlices offer a more scalable and extensible way to track the network endpoints (Pod IPs and ports) that a Service routes to. They replaced the older Endpoints object for improved performance, especially in large clusters with many Pods per Service.",Networking
28,Which component of a Service Mesh architecture is typically injected as a sidecar container into application Pods?,The control plane's central policy manager.,"The data plane proxy (e.g., Envoy, Linkerd2-proxy).",The certificate authority for issuing mTLS certificates.,The metrics collection and aggregation server.,The UI dashboard for visualizing mesh topology.,B,"In a Service Mesh, a data plane proxy (like Envoy or Linkerd2-proxy) is usually deployed as a sidecar container alongside each application container in the Pod. This proxy intercepts all network traffic to and from the application container, enabling the mesh's features.",Service Mesh
29,"A StatefulSet requires stable, unique network identifiers for its Pods. How is this typically achieved in Kubernetes?",By manually assigning static IP addresses to each Pod.,Through a headless Service that creates DNS records for each Pod.,Using hostNetwork: true for all Pods in the StatefulSet.,By relying on CNI plugins to assign predictable IPs from a predefined range.,By using NetworkPolicy to restrict Pod IPs.,B,"StatefulSets often use a headless Service (a Service with clusterIP: None). This causes DNS to create A records for each Pod (e.g., mypod-0.my-service.my-namespace) that resolve directly to the Pod's IP, providing stable, resolvable hostnames.",Networking
30,"When using dynamic provisioning for Kubernetes storage, what happens if a PersistentVolumeClaim requests a StorageClass that does not exist?",The PVC remains in a Pending state indefinitely or until the class is created.,Kubernetes automatically creates a default StorageClass and uses it.,The Pod attempting to use the PVC will fail to start with a network error.,The PVC will use any available PersistentVolume regardless of its StorageClass.,The request defaults to using hostPath storage on the assigned node.,A,"If a PVC specifies a StorageClass that doesn't exist, and no default StorageClass is able to fulfill the request, the PVC will remain in the Pending state because no storage can be dynamically provisioned to satisfy its requirements.",Storage
31,"What is the primary benefit of using orchestration for rolling updates compared to manual, script-based updates?",Faster individual container restart times.,Guaranteed zero cost for update operations.,"Automated health checks, progressive rollout, and easier rollback capabilities.",Elimination of the need for container image registries.,In-place binary patching of running application code.,C,"Orchestrators manage rolling updates by incrementally replacing old instances with new ones, performing health checks on new instances before proceeding, and allowing for automated or easy rollbacks if issues arise. This is far more robust than manual scripting.",Container Orchestration Fundamentals
32,What is a key difference between containerd and Docker Engine in the context of Kubernetes (post-dockershim removal)?,containerd cannot run Docker-formatted images; Docker Engine can.,Docker Engine includes build tools and a CLI; containerd is a core runtime.,containerd is not OCI compliant; Docker Engine is.,Docker Engine implements CRI directly; containerd requires a shim.,containerd is only for Linux; Docker Engine is cross-platform.,B,"Docker Engine is a larger platform that includes client tools (docker CLI), image building capabilities, and the containerd runtime itself. containerd is a focused OCI-compliant core runtime component designed to be embedded into larger systems like Kubernetes or Docker Engine.",Runtime
33,How does Role-Based Access Control (RBAC) in Kubernetes contribute to the principle of least privilege?,By encrypting all API communication by default.,By ensuring all Pods run with minimal resource requests and limits.,By allowing administrators to grant users/ServiceAccounts only necessary permissions.,By automatically rotating credentials for ServiceAccounts.,By restricting network access between namespaces.,C,"RBAC allows fine-grained control over who can perform what actions on which resources. By creating specific Roles/ClusterRoles with minimal necessary permissions and binding them to users or ServiceAccounts, administrators can enforce least privilege, reducing the attack surface.",Security
34,Which type of Kubernetes Service is typically used to expose an application to traffic from outside the Kubernetes cluster using a cloud provider's load balancer?,ClusterIP,NodePort,LoadBalancer,ExternalName,Headless Service,C,"A Service of type LoadBalancer automatically provisions an external load balancer (if supported by the underlying cloud provider) and assigns it an external IP address, routing external traffic to the Service's Pods.",Networking
35,"What is the concept of a ""control plane"" in a Service Mesh architecture?",The set of sidecar proxies running alongside application containers.,The central components that manage and configure the data plane proxies.,The application code responsible for handling business logic.,The underlying Kubernetes cluster nodes.,The network infrastructure connecting the cluster to the internet.,B,"The Service Mesh control plane (e.g., Istiod in Istio) provides the management functions. It configures the data plane proxies (sidecars) with policies, collects telemetry from them, and manages service discovery and certificate rotation within the mesh.",Service Mesh
36,"If a PersistentVolume is reclaimed using the Delete reclaim policy, what happens to the underlying storage when the associated PersistentVolumeClaim is deleted?",The storage is archived and can be restored later.,"The PersistentVolume object is deleted, but the data on the storage medium remains.",The data on the underlying storage medium is deleted.,The PersistentVolume becomes available for another PersistentVolumeClaim.,The storage is automatically resized to its minimum capacity.,C,"With the Delete reclaim policy, deleting the PVC will also trigger the deletion of the PersistentVolume object and the associated storage asset in the external infrastructure (e.g., AWS EBS volume, GCE PD). The Retain policy keeps the data.",Storage
37,A PodSecurityContext can be used to define security settings that apply to:,All Pods within a specific Namespace.,A specific container within a Pod.,"All containers within a Pod, and potentially the Pod's volumes.",Only the network policies associated with a Pod.,The ServiceAccount used by the Pod.,C,"A PodSecurityContext defines privilege and access control settings for an entire Pod. These settings apply to all containers within that Pod and can also affect volumes (e.g., fsGroup). A SecurityContext can also be set at the individual container level.",Security
38,What is a key benefit of using the Container Runtime Interface (CRI) from Kubernetes' perspective?,It simplifies the container image building process for developers.,It allows Kubernetes to be independent of specific container runtime implementations.,It provides a built-in metrics collection system for containers.,It enables running virtual machines alongside containers within the same Pod.,It standardizes the format for container log messages.,B,"CRI provides a stable abstraction layer. This allows Kubernetes to support multiple container runtimes without having runtime-specific code in the core kubelet. As long as a runtime implements CRI, Kubernetes can use it.",Runtime
39,What is the main difference between iptables and IPVS modes for kube-proxy?,iptables mode is newer and supports more advanced features.,IPVS is designed for smaller clusters; iptables for larger ones.,"iptables uses linked lists for rules; IPVS uses hash tables, often better for scale.",IPVS mode does not require kube-proxy to run on worker nodes.,iptables mode can only handle HTTP traffic; IPVS handles all TCP/UDP.,C,"IPVS (IP Virtual Server) is built on the Netfilter hook function and uses hash tables. It's generally considered more performant and scalable for a large number of Services compared to iptables mode, which uses sequential rule processing that can become slow with many rules.",Networking
40,When would you typically choose a Service Mesh over just using Kubernetes NetworkPolicies for securing inter-Pod communication?,When you need basic L3/L4 firewalling based on Pod labels.,"When you require application-layer (L7) traffic management, mTLS, and observability.",When you need to expose services externally using an Ingress controller.,When you want to restrict a Pod's access to host resources.,When the primary concern is node-to-node encryption.,B,"NetworkPolicies provide L3/L4 segmentation. A Service Mesh operates at L7, offering richer features like automatic mTLS for strong identity and encryption, fine-grained traffic control (retries, timeouts, circuit breaking), and detailed telemetry (metrics, distributed traces) for application traffic.",Service Mesh
41,How does a VolumeSnapshot object in Kubernetes relate to a PersistentVolumeClaim?,It defines the maximum size a PVC can grow to.,It's a request to create a point-in-time copy of the data in a PVC.,It's a type of PVC that uses ephemeral local storage.,It specifies the encryption key to be used for a PVC.,It provides a template for creating multiple identical PVCs.,B,A VolumeSnapshot represents a snapshot of the data on a volume associated with a PVC at a specific point in time. This is typically used for backup and restore purposes and requires a CSI driver that supports snapshots.,Storage
42,Which Kubernetes security mechanism would you use to prevent containers in a Pod from running as the root user or gaining new privileges?,NetworkPolicy,Role and RoleBinding,"SecurityContext (e.g., runAsNonRoot: true, allowPrivilegeEscalation: false)",Secret storing user credentials.,LimitRange defining CPU limits.,C,The SecurityContext (at Pod or container level) allows setting various security parameters. runAsNonRoot: true ensures the container doesn't run as root. allowPrivilegeEscalation: false prevents a process from gaining more privileges than its parent.,Security
43,"What is the primary advantage of a ""headless"" Service in Kubernetes?",It provides a stable ClusterIP for load balancing.,It automatically creates an external load balancer for the Service.,"It allows direct Pod IP discovery via DNS, often used with StatefulSets.",It encrypts all traffic to the Pods it selects.,It exposes Pods on every node using a fixed NodePort.,C,"A headless Service (clusterIP: None) does not get a ClusterIP. Instead, DNS queries for the Service name return the IP addresses of the individual backing Pods. This is useful for peer-to-peer discovery or when clients need to connect to specific Pod instances, common with StatefulSets.",Networking
44,"In a Service Mesh, what is the typical role of the ""data plane""?",To define global policies and configurations for service communication.,To collect telemetry data and send it to a centralized monitoring system.,"To actually handle and proxy network traffic between services (e.g., using sidecars).",To provide a user interface for managing and visualizing the mesh.,"To manage the lifecycle of service instances (deploy, scale, heal).",C,"The data plane consists of the network proxies (usually sidecars like Envoy) that are deployed alongside each service instance. These proxies intercept, inspect, and route all network traffic to and from the services, enforcing policies received from the control plane.",Service Mesh
45,"What does the accessModes field (e.g., ReadWriteOnce, ReadOnlyMany, ReadWriteMany) on a PersistentVolume signify?","The speed of the underlying storage (e.g., SSD vs. HDD).",The encryption status of the volume.,How the volume can be mounted by nodes and Pods.,The backup policy for the volume.,The geographical region where the storage is located.,C,accessModes define how many nodes can mount the PV and in what mode. ReadWriteOnce (RWO) means it can be mounted read-write by a single node. ReadOnlyMany (ROX) means read-only by many nodes. ReadWriteMany (RWX) means read-write by many nodes. ReadWriteOncePod (RWOP) is read-write by a single Pod.,Storage
46,What differentiates a PodSecurityPolicy (deprecated) or its successor (Pod Security Admission) from a NetworkPolicy?,PodSecurityPolicy controls network access; NetworkPolicy controls Pod privileges.,"PodSecurityPolicy defines what a Pod can do (e.g., host access, privileges); NetworkPolicy defines network connectivity.",Both control the same aspects but at different scopes (namespace vs. cluster).,NetworkPolicy is implemented by CNI; PodSecurityPolicy by the runtime.,PodSecurityPolicy is for ingress; NetworkPolicy is for egress.,B,"Pod Security Admission (and its predecessor PSP) define a set of conditions a Pod must run with to be accepted into the cluster (e.g., running as non-root, not using host networking, allowed volumes). NetworkPolicy controls L3/L4 network traffic flow to/from Pods.",Security
47,How does Kubernetes DNS enable service discovery for a Service named my-svc in namespace my-ns from another Pod in the same namespace?,The Pod queries for my-svc.my-ns.svc.cluster.local.,The Pod queries for my-svc.,The Pod queries for the ClusterIP of my-svc directly.,kube-proxy injects the IP of my-svc into the Pod's /etc/hosts.,Pods cannot discover services in the same namespace via DNS.,B,"Within the same namespace, a short Service name (e.g., my-svc) is sufficient for DNS resolution because the namespace is part of the Pod's DNS search path. For cross-namespace, my-svc.my-ns or the FQDN my-svc.my-ns.svc.cluster.local would be used.",Networking
48,"What is the primary purpose of the volumeMode field (e.g., Filesystem, Block) in a PersistentVolume and PersistentVolumeClaim?",To specify whether the volume should be encrypted.,To indicate if the volume supports snapshots.,To determine if the volume should be presented as a mounted filesystem or a raw block device.,To define the accessModes allowed for the volume.,To set the default permissions for files created on the volume.,C,"volumeMode allows a PV to be exposed as either a mounted filesystem (default) or as a raw block device. Block mode is useful for applications that need direct access to a block device, like certain databases.",Storage
49,"If a container image specifies a USER instruction, but the Pod's SecurityContext also defines runAsUser, which value typically takes precedence?",The USER instruction in the Dockerfile.,The runAsUser from the Pod's SecurityContext.,Neither; the container will run as root by default.,"The values are merged, leading to an error.",The kubelet decides based on node configuration.,B,Kubernetes' SecurityContext settings (at Pod or container level) generally override the USER instruction baked into the container image. This allows cluster administrators to enforce security policies regardless of how an image was built.,Security
50,One of the challenges in early container adoption was managing many containers across many hosts. What core capability did orchestrators bring to solve this directly?,Standardization of container image formats.,Automated cluster-wide scheduling and resource management.,Tools for building smaller container images.,Secure private container image registries.,Faster container boot times.,B,"While all options are part of the broader ecosystem, the direct answer to managing many containers on many hosts is the automated scheduling (placing containers on appropriate hosts) and resource management (allocating CPU/memory) provided by orchestrators like Kubernetes.",Container Orchestration Fundamentals